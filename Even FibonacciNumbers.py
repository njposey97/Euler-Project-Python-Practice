#Problem Description from projecteuler.net
#######################################################################################################
####  Each new term in the Fibonacci sequence is generated by adding the previous two terms.       ####
####  By starting with 1 and 2, the first 10 terms will be:                                        ####
####                                                                                               ####
####  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...                                                       ####
####                                                                                               ####
####  By considering the terms in the Fibonacci sequence whose values do not exceed four million,  #### 
####  find the sum of the even-valued terms.                                                       ####
#######################################################################################################

#Stack data type with code from
#http://interactivepython.org/courselib/static/pythonds/BasicDS/ImplementingaStackinPython.html

class Stack:

    def __init__(self):
        self.items = []

    def isEmpty(self):
        return self.items == []

    def pop(self):
        return self.items.pop()

    def push(self, item):
        return self.items.append(item)

    def peek(self):
        return self.items[len(self.items) - 1]

    def size(self):
        return len(self.items)


#begin main program

evenFibonacci = Stack()
evenFibonacci.push(2)

num = 2
prevNum = 1
tempNum = 0
sumNum = 0

while num < 4000000:
    tempNum = num + prevNum
    prevNum = num
    num = tempNum

    if num%2 == 0:
        evenFibonacci.push(num)

#when this finishes running, we will have a stack of all even fibonacci numbers

a = 0

while not(evenFibonacci.isEmpty()):
    a = evenFibonacci.pop()
    sumNum += a

print(sumNum)
